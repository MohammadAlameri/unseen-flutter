// الفصل الأول: ما وراء الـ Widget: فهم الأشجار الثلاث لـ Flutter
export function getChapter1ContentArabic() {
  return {
    id: 1,
    partId: 1,
    title: "ما وراء الـ Widget: فهم الأشجار الثلاث لـ Flutter",
    sections: [
      "شجرة الـ Widget: مخطط واجهة المستخدم الخاص بك",
      "شجرة الـ Element: الجسر القابل للتغيير", 
      "شجرة الـ Render: رسم البكسلات على الشاشة",
      "رقصة الأشجار: كيف تحدث تحديثات واجهة المستخدم"
    ],
    readTime: "25 دقيقة",
    content: `
# الفصل الأول: ما وراء الـ Widget: فهم الأشجار الثلاث لـ Flutter

في Flutter، كل شيء هو widget. هذا الشعار المتكرر أساسي لفهم نموذج واجهة المستخدم التصريحي في Flutter. ومع ذلك، فإن كائنات الـ \`Widget\` التي تكتبها في كود Dart الخاص بك هي مجرد مخططات. خلف الكواليس، يستخدم Flutter نظاماً معقداً يتضمن ثلاث أشجار متميزة ولكن مترابطة لعرض وتحديث واجهة المستخدم لتطبيقك بكفاءة: شجرة الـ Widget، وشجرة الـ Element، وشجرة الـ Render.

## 1.1 شجرة الـ Widget: مخطط واجهة المستخدم الخاص بك

شجرة الـ Widget هي الأكثر ألفة من الأشجار الثلاث لمطوري Flutter، حيث تتوافق مباشرة مع كود واجهة المستخدم التصريحي المكتوب في Dart. كل مكون مرئي وغير مرئي في تطبيق Flutter هو، في جوهره، \`Widget\`. من \`Text\` و \`Image\` إلى \`Column\` و \`GestureDetector\`، كل \`Widget\` يعمل كوصف تصريحي لجزء من واجهة المستخدم.

\`\`\`dart
class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('مرحباً Flutter'),
        Container(
          child: Icon(Icons.star),
        ),
      ],
    );
  }
}
\`\`\`

من المهم فهم أن كائنات الـ \`Widget\` في Flutter **غير قابلة للتغيير**. هذا عدم القابلية للتغيير هو حجر الزاوية في أداء Flutter وقابليته للتنبؤ. بمجرد إنشاء كائن \`Widget\`، لا يمكن تغيير تكوينه (خصائصه).

## 1.2 شجرة الـ Element: الجسر القابل للتغيير

بينما الـ \`Widget\`s هي المخططات التصريحية لواجهة المستخدم الخاصة بك، فإن شجرة الـ \`Element\` هي التمثيل المتغير والملموس لتسلسل واجهة المستخدم لتطبيقك. لكل \`Widget\` في شجرة الـ Widget، ينشئ Flutter \`Element\` مقابل في شجرة الـ Element.

على عكس الـ \`Widget\`s، الـ \`Element\`s قابلة للتغيير وأكثر استمرارية. إنها الوسطاء بين تكوينات الـ \`Widget\` غير القابلة للتغيير والـ \`RenderObject\`s منخفضة المستوى التي تتعامل مع العرض الفعلي.

## 1.3 شجرة الـ Render: رسم البكسلات على الشاشة

شجرة الـ \`Render\`، المعروفة أيضاً باسم شجرة الـ \`RenderObject\`، هي الشجرة الأدنى مستوى في خط أنابيب عرض واجهة المستخدم في Flutter. بينما تصف شجرة الـ Widget تكوين واجهة المستخدم المرغوب وتدير شجرة الـ Element تسلسل واجهة المستخدم، فإن شجرة الـ Render مسؤولة عن التخطيط الفعلي والرسم واختبار الضرب لواجهة المستخدم على الشاشة.

الـ \`RenderObject\`s محسنة بشدة للأداء. إنها مصممة لتكون فعالة من ناحية استخدام الذاكرة وسرعة العرض. على عكس الـ \`Widget\`s، التي هي غير قابلة للتغيير ويتم إعادة بنائها بشكل متكرر، فإن الـ \`RenderObject\`s قابلة للتغيير ومستمرة.

## 1.4 رقصة الأشجار: كيف تحدث تحديثات واجهة المستخدم

تكمن القوة الحقيقية وكفاءة محرك العرض في Flutter في الرقصة المعقدة بين أشجار الـ Widget والـ Element والـ Render أثناء تحديثات واجهة المستخدم. هذا الجهد المنسق، الذي يُشار إليه غالباً باسم **عملية المصالحة**، هو ما يسمح لـ Flutter بتحقيق أدائه المثير للإعجاب والرسوم المتحركة السلسة.

عندما يتم استدعاء method الـ \`setState()\` الخاص بـ \`StatefulWidget\`، أو عندما يعيد \`StatelessWidget\` الأصل البناء، يتم إنشاء شجرة \`Widget\` جديدة. ثم يشرع Flutter في عملية مقارنة شجرة الـ \`Widget\` الجديدة هذه مع شجرة الـ \`Element\` الموجودة.
    `
  };
} 